---
name: Build
on:
  pull_request:
  push:
    branches:
      - main

permissions:
  contents: read    # This is required for actions/checkout
  packages: write   # This is required for docker/build-push-action

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/audio-server

jobs:

  build-docker-images:
    name: Build Docker image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: [audio-server, ui]
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Determine version
        id: version
        env:
          VERSION: 0.0.2
        run: |
          # Check if triggered by a pull request by checking if ${{ github.event.number }} is set
            if [ -n "${{ github.event.number }}" ]; then
                echo "version=${{ env.VERSION }}-pr${{ github.event.number }}" >> "${GITHUB_OUTPUT}"
            else
                echo "version=${{ env.VERSION }}" >> "${GITHUB_OUTPUT}"
            fi

      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/arm/v6, linux/arm/v7
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm/v6, linux/arm/v7
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.app }}
          tags: |
            type=raw,value=${{ steps.version.outputs.version }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.app }}
          file: ./${{ matrix.app }}/Dockerfile
          platforms: linux/arm/v6, linux/arm/v7
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  extract-binaries:
    runs-on: ubuntu-latest
    needs: build-docker-images
    strategy:
      matrix:
        platform: [linux/arm/v6, linux/arm/v7]
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.platform }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ matrix.platform }}
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract binaries
        run: |
          docker pull --platform ${{ matrix.platform }} ${{ env.REGISTRY }}/${{ github.repository }}/audio-server:${{ needs.build-docker-images.outputs.version }}
          docker create --platform ${{ matrix.platform }} --name extract ${{ env.REGISTRY }}/${{ github.repository }}/audio-server:${{ needs.build-docker-images.outputs.version }}
          docker cp extract:/app/server ./audio-server
          docker rm -f extract
      - name: Patch Artifact Name
        id: patch-artifact-name
        run: |
          prefix="audio-server"
          platform="${{ matrix.platform }}"

          artifactName="${prefix}-${platform//\//-}"
          echo "patched=${artifactName}" >> "${GITHUB_OUTPUT}"

      - name: Upload binary
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.patch-artifact-name.outputs.patched }}
          path: ./audio-server


  tag:
    name: Tag Release
    runs-on: ubuntu-22.04
    permissions: write-all
    outputs:
      new_tag: ${{ steps.tag_version.outputs.new_tag }}
      changelog: ${{ steps.tag_version.outputs.changelog }}
    if: ${{ github.event_name == 'push' }}
    steps:
      - name: Create Tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ github.token }}
          default_bump: minor
          create_annotated_tag: true
          tag_prefix: ""

  release:
    runs-on: ubuntu-22.04
    permissions: write-all
    needs: [tag]
    if: ${{ github.event_name == 'push' }}
    steps:
      - uses: actions/checkout@v4
      - name: Download Binaries
        uses: actions/download-artifact@v4
        id: download-binaries
        with:
          github-token: ${{ github.token }}
          pattern: "audio-server-*"
          path: "./bin"
          merge-multiple: true
      - name: Create Release
        uses: ncipollo/release-action@v1
        id: create-release
        with:
          tag: ${{ needs.tag.outputs.new_tag }}
          name: ${{ needs.tag.outputs.new_tag }} - Release
          body: ${{ needs.tag.outputs.changelog }}
          token: ${{ github.token }}
          prerelease: false
          artifacts: >
            ${{ steps.download-binaries.outputs.download-path }}/**/*
            ui/index.html
